// Generated by Dagger (https://dagger.dev).
package com.example.feature_transaction.di;

import com.example.feature_transaction.data.remote.TransactionService;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class TransactionModule_ProvideSpaceServiceFactory implements Factory<TransactionService> {
  private final TransactionModule module;

  private final Provider<Retrofit> retrofitProvider;

  public TransactionModule_ProvideSpaceServiceFactory(TransactionModule module,
      Provider<Retrofit> retrofitProvider) {
    this.module = module;
    this.retrofitProvider = retrofitProvider;
  }

  @Override
  public TransactionService get() {
    return provideSpaceService(module, retrofitProvider.get());
  }

  public static TransactionModule_ProvideSpaceServiceFactory create(TransactionModule module,
      Provider<Retrofit> retrofitProvider) {
    return new TransactionModule_ProvideSpaceServiceFactory(module, retrofitProvider);
  }

  public static TransactionService provideSpaceService(TransactionModule instance,
      Retrofit retrofit) {
    return Preconditions.checkNotNullFromProvides(instance.provideSpaceService(retrofit));
  }
}
