// Generated by Dagger (https://dagger.dev).
package com.example.feature_transaction.presentation.viewmodel;

import com.example.feature_transaction.domain.use_case.AddTxnListUseCase;
import com.example.feature_transaction.domain.use_case.CreateTransactionUseCase;
import com.example.feature_transaction.domain.use_case.DeleteTransactionDetailsByTxnDetailsIdUseCase;
import com.example.feature_transaction.domain.use_case.DeleteTransactionUseCase;
import com.example.feature_transaction.domain.use_case.GetAllSpaceByUserIdUsecase;
import com.example.feature_transaction.domain.use_case.GetAllSpaceMembersBySpaceIdUsecase;
import com.example.feature_transaction.domain.use_case.GetAllTxnDetailsByTxnIdUseCase;
import com.example.feature_transaction.domain.use_case.GetAllTxnDetailsByUserIdUseCase;
import com.example.feature_transaction.domain.use_case.GetSingleTxnDetailsByTxnDetailsIdUsecase;
import com.example.feature_transaction.domain.use_case.GetTxnBalanceUseCase;
import com.example.feature_transaction.domain.use_case.UpdateSingleTxnDetailsByTxnIdUseCase;
import com.example.session.SessionManager;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class TransactionViewModel_Factory implements Factory<TransactionViewModel> {
  private final Provider<GetAllSpaceByUserIdUsecase> getAllSpaceByUserIdUsecaseProvider;

  private final Provider<GetAllSpaceMembersBySpaceIdUsecase> getAllSpaceMembersBySpaceIdUsecaseProvider;

  private final Provider<CreateTransactionUseCase> createTransactionUseCaseProvider;

  private final Provider<DeleteTransactionUseCase> deleteTransactionUseCaseProvider;

  private final Provider<AddTxnListUseCase> addTxnListUseCaseProvider;

  private final Provider<GetAllTxnDetailsByTxnIdUseCase> getAllTxnDetailsByTxnIdUseCaseProvider;

  private final Provider<GetSingleTxnDetailsByTxnDetailsIdUsecase> getSingleTxnDetailsByTxnDetailsIdUsecaseProvider;

  private final Provider<DeleteTransactionDetailsByTxnDetailsIdUseCase> deleteTransactionDetailsByTxnDetailsIdUseCaseProvider;

  private final Provider<UpdateSingleTxnDetailsByTxnIdUseCase> updateSingleTxnDetailsByTxnIdUseCaseProvider;

  private final Provider<GetAllTxnDetailsByUserIdUseCase> getAllTxnDetailsByUserIdUseCaseProvider;

  private final Provider<GetTxnBalanceUseCase> getTxnbalanceUseCaseProvider;

  private final Provider<SessionManager> sessionManagerProvider;

  public TransactionViewModel_Factory(
      Provider<GetAllSpaceByUserIdUsecase> getAllSpaceByUserIdUsecaseProvider,
      Provider<GetAllSpaceMembersBySpaceIdUsecase> getAllSpaceMembersBySpaceIdUsecaseProvider,
      Provider<CreateTransactionUseCase> createTransactionUseCaseProvider,
      Provider<DeleteTransactionUseCase> deleteTransactionUseCaseProvider,
      Provider<AddTxnListUseCase> addTxnListUseCaseProvider,
      Provider<GetAllTxnDetailsByTxnIdUseCase> getAllTxnDetailsByTxnIdUseCaseProvider,
      Provider<GetSingleTxnDetailsByTxnDetailsIdUsecase> getSingleTxnDetailsByTxnDetailsIdUsecaseProvider,
      Provider<DeleteTransactionDetailsByTxnDetailsIdUseCase> deleteTransactionDetailsByTxnDetailsIdUseCaseProvider,
      Provider<UpdateSingleTxnDetailsByTxnIdUseCase> updateSingleTxnDetailsByTxnIdUseCaseProvider,
      Provider<GetAllTxnDetailsByUserIdUseCase> getAllTxnDetailsByUserIdUseCaseProvider,
      Provider<GetTxnBalanceUseCase> getTxnbalanceUseCaseProvider,
      Provider<SessionManager> sessionManagerProvider) {
    this.getAllSpaceByUserIdUsecaseProvider = getAllSpaceByUserIdUsecaseProvider;
    this.getAllSpaceMembersBySpaceIdUsecaseProvider = getAllSpaceMembersBySpaceIdUsecaseProvider;
    this.createTransactionUseCaseProvider = createTransactionUseCaseProvider;
    this.deleteTransactionUseCaseProvider = deleteTransactionUseCaseProvider;
    this.addTxnListUseCaseProvider = addTxnListUseCaseProvider;
    this.getAllTxnDetailsByTxnIdUseCaseProvider = getAllTxnDetailsByTxnIdUseCaseProvider;
    this.getSingleTxnDetailsByTxnDetailsIdUsecaseProvider = getSingleTxnDetailsByTxnDetailsIdUsecaseProvider;
    this.deleteTransactionDetailsByTxnDetailsIdUseCaseProvider = deleteTransactionDetailsByTxnDetailsIdUseCaseProvider;
    this.updateSingleTxnDetailsByTxnIdUseCaseProvider = updateSingleTxnDetailsByTxnIdUseCaseProvider;
    this.getAllTxnDetailsByUserIdUseCaseProvider = getAllTxnDetailsByUserIdUseCaseProvider;
    this.getTxnbalanceUseCaseProvider = getTxnbalanceUseCaseProvider;
    this.sessionManagerProvider = sessionManagerProvider;
  }

  @Override
  public TransactionViewModel get() {
    return newInstance(getAllSpaceByUserIdUsecaseProvider.get(), getAllSpaceMembersBySpaceIdUsecaseProvider.get(), createTransactionUseCaseProvider.get(), deleteTransactionUseCaseProvider.get(), addTxnListUseCaseProvider.get(), getAllTxnDetailsByTxnIdUseCaseProvider.get(), getSingleTxnDetailsByTxnDetailsIdUsecaseProvider.get(), deleteTransactionDetailsByTxnDetailsIdUseCaseProvider.get(), updateSingleTxnDetailsByTxnIdUseCaseProvider.get(), getAllTxnDetailsByUserIdUseCaseProvider.get(), getTxnbalanceUseCaseProvider.get(), sessionManagerProvider.get());
  }

  public static TransactionViewModel_Factory create(
      Provider<GetAllSpaceByUserIdUsecase> getAllSpaceByUserIdUsecaseProvider,
      Provider<GetAllSpaceMembersBySpaceIdUsecase> getAllSpaceMembersBySpaceIdUsecaseProvider,
      Provider<CreateTransactionUseCase> createTransactionUseCaseProvider,
      Provider<DeleteTransactionUseCase> deleteTransactionUseCaseProvider,
      Provider<AddTxnListUseCase> addTxnListUseCaseProvider,
      Provider<GetAllTxnDetailsByTxnIdUseCase> getAllTxnDetailsByTxnIdUseCaseProvider,
      Provider<GetSingleTxnDetailsByTxnDetailsIdUsecase> getSingleTxnDetailsByTxnDetailsIdUsecaseProvider,
      Provider<DeleteTransactionDetailsByTxnDetailsIdUseCase> deleteTransactionDetailsByTxnDetailsIdUseCaseProvider,
      Provider<UpdateSingleTxnDetailsByTxnIdUseCase> updateSingleTxnDetailsByTxnIdUseCaseProvider,
      Provider<GetAllTxnDetailsByUserIdUseCase> getAllTxnDetailsByUserIdUseCaseProvider,
      Provider<GetTxnBalanceUseCase> getTxnbalanceUseCaseProvider,
      Provider<SessionManager> sessionManagerProvider) {
    return new TransactionViewModel_Factory(getAllSpaceByUserIdUsecaseProvider, getAllSpaceMembersBySpaceIdUsecaseProvider, createTransactionUseCaseProvider, deleteTransactionUseCaseProvider, addTxnListUseCaseProvider, getAllTxnDetailsByTxnIdUseCaseProvider, getSingleTxnDetailsByTxnDetailsIdUsecaseProvider, deleteTransactionDetailsByTxnDetailsIdUseCaseProvider, updateSingleTxnDetailsByTxnIdUseCaseProvider, getAllTxnDetailsByUserIdUseCaseProvider, getTxnbalanceUseCaseProvider, sessionManagerProvider);
  }

  public static TransactionViewModel newInstance(
      GetAllSpaceByUserIdUsecase getAllSpaceByUserIdUsecase,
      GetAllSpaceMembersBySpaceIdUsecase getAllSpaceMembersBySpaceIdUsecase,
      CreateTransactionUseCase createTransactionUseCase,
      DeleteTransactionUseCase deleteTransactionUseCase, AddTxnListUseCase addTxnListUseCase,
      GetAllTxnDetailsByTxnIdUseCase getAllTxnDetailsByTxnIdUseCase,
      GetSingleTxnDetailsByTxnDetailsIdUsecase getSingleTxnDetailsByTxnDetailsIdUsecase,
      DeleteTransactionDetailsByTxnDetailsIdUseCase deleteTransactionDetailsByTxnDetailsIdUseCase,
      UpdateSingleTxnDetailsByTxnIdUseCase updateSingleTxnDetailsByTxnIdUseCase,
      GetAllTxnDetailsByUserIdUseCase getAllTxnDetailsByUserIdUseCase,
      GetTxnBalanceUseCase getTxnbalanceUseCase, SessionManager sessionManager) {
    return new TransactionViewModel(getAllSpaceByUserIdUsecase, getAllSpaceMembersBySpaceIdUsecase, createTransactionUseCase, deleteTransactionUseCase, addTxnListUseCase, getAllTxnDetailsByTxnIdUseCase, getSingleTxnDetailsByTxnDetailsIdUsecase, deleteTransactionDetailsByTxnDetailsIdUseCase, updateSingleTxnDetailsByTxnIdUseCase, getAllTxnDetailsByUserIdUseCase, getTxnbalanceUseCase, sessionManager);
  }
}
