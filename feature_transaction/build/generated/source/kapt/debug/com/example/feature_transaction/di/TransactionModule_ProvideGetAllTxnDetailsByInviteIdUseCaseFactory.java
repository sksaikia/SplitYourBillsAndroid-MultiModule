// Generated by Dagger (https://dagger.dev).
package com.example.feature_transaction.di;

import com.example.feature_transaction.domain.repository.TransactionRepository;
import com.example.feature_transaction.domain.use_case.GetAllTxnDetailsByInviteIdUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class TransactionModule_ProvideGetAllTxnDetailsByInviteIdUseCaseFactory implements Factory<GetAllTxnDetailsByInviteIdUseCase> {
  private final TransactionModule module;

  private final Provider<TransactionRepository> repositoryProvider;

  public TransactionModule_ProvideGetAllTxnDetailsByInviteIdUseCaseFactory(TransactionModule module,
      Provider<TransactionRepository> repositoryProvider) {
    this.module = module;
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public GetAllTxnDetailsByInviteIdUseCase get() {
    return provideGetAllTxnDetailsByInviteIdUseCase(module, repositoryProvider.get());
  }

  public static TransactionModule_ProvideGetAllTxnDetailsByInviteIdUseCaseFactory create(
      TransactionModule module, Provider<TransactionRepository> repositoryProvider) {
    return new TransactionModule_ProvideGetAllTxnDetailsByInviteIdUseCaseFactory(module, repositoryProvider);
  }

  public static GetAllTxnDetailsByInviteIdUseCase provideGetAllTxnDetailsByInviteIdUseCase(
      TransactionModule instance, TransactionRepository repository) {
    return Preconditions.checkNotNullFromProvides(instance.provideGetAllTxnDetailsByInviteIdUseCase(repository));
  }
}
