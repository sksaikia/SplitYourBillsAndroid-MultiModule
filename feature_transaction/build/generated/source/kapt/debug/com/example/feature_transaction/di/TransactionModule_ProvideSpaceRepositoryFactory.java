// Generated by Dagger (https://dagger.dev).
package com.example.feature_transaction.di;

import com.example.feature_transaction.data.remote.TransactionService;
import com.example.feature_transaction.domain.repository.TransactionRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class TransactionModule_ProvideSpaceRepositoryFactory implements Factory<TransactionRepository> {
  private final TransactionModule module;

  private final Provider<TransactionService> apiProvider;

  public TransactionModule_ProvideSpaceRepositoryFactory(TransactionModule module,
      Provider<TransactionService> apiProvider) {
    this.module = module;
    this.apiProvider = apiProvider;
  }

  @Override
  public TransactionRepository get() {
    return provideSpaceRepository(module, apiProvider.get());
  }

  public static TransactionModule_ProvideSpaceRepositoryFactory create(TransactionModule module,
      Provider<TransactionService> apiProvider) {
    return new TransactionModule_ProvideSpaceRepositoryFactory(module, apiProvider);
  }

  public static TransactionRepository provideSpaceRepository(TransactionModule instance,
      TransactionService api) {
    return Preconditions.checkNotNullFromProvides(instance.provideSpaceRepository(api));
  }
}
