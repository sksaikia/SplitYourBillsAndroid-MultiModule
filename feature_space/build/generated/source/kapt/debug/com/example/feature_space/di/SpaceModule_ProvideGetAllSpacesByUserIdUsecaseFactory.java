// Generated by Dagger (https://dagger.dev).
package com.example.feature_space.di;

import com.example.feature_space.domain.repository.SpacesRepository;
import com.example.feature_space.domain.usecase.GetAllSpaceByUserIdUsecase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class SpaceModule_ProvideGetAllSpacesByUserIdUsecaseFactory implements Factory<GetAllSpaceByUserIdUsecase> {
  private final Provider<SpacesRepository> repositoryProvider;

  public SpaceModule_ProvideGetAllSpacesByUserIdUsecaseFactory(
      Provider<SpacesRepository> repositoryProvider) {
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public GetAllSpaceByUserIdUsecase get() {
    return provideGetAllSpacesByUserIdUsecase(repositoryProvider.get());
  }

  public static SpaceModule_ProvideGetAllSpacesByUserIdUsecaseFactory create(
      Provider<SpacesRepository> repositoryProvider) {
    return new SpaceModule_ProvideGetAllSpacesByUserIdUsecaseFactory(repositoryProvider);
  }

  public static GetAllSpaceByUserIdUsecase provideGetAllSpacesByUserIdUsecase(
      SpacesRepository repository) {
    return Preconditions.checkNotNullFromProvides(SpaceModule.INSTANCE.provideGetAllSpacesByUserIdUsecase(repository));
  }
}
