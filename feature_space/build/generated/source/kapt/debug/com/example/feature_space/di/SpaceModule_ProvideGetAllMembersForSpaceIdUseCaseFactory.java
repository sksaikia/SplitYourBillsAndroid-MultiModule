// Generated by Dagger (https://dagger.dev).
package com.example.feature_space.di;

import com.example.feature_space.domain.repository.SpacesRepository;
import com.example.feature_space.domain.usecase.GetAllMembersForSpaceIdUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class SpaceModule_ProvideGetAllMembersForSpaceIdUseCaseFactory implements Factory<GetAllMembersForSpaceIdUseCase> {
  private final Provider<SpacesRepository> repositoryProvider;

  public SpaceModule_ProvideGetAllMembersForSpaceIdUseCaseFactory(
      Provider<SpacesRepository> repositoryProvider) {
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public GetAllMembersForSpaceIdUseCase get() {
    return provideGetAllMembersForSpaceIdUseCase(repositoryProvider.get());
  }

  public static SpaceModule_ProvideGetAllMembersForSpaceIdUseCaseFactory create(
      Provider<SpacesRepository> repositoryProvider) {
    return new SpaceModule_ProvideGetAllMembersForSpaceIdUseCaseFactory(repositoryProvider);
  }

  public static GetAllMembersForSpaceIdUseCase provideGetAllMembersForSpaceIdUseCase(
      SpacesRepository repository) {
    return Preconditions.checkNotNullFromProvides(SpaceModule.INSTANCE.provideGetAllMembersForSpaceIdUseCase(repository));
  }
}
