// Generated by Dagger (https://dagger.dev).
package com.example.feature_space.di;

import com.example.feature_space.domain.repository.SpacesRepository;
import com.example.feature_space.domain.usecase.GetTxnBalanceUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class SpaceModule_ProvideGetTxnBalanceUseCaseFactory implements Factory<GetTxnBalanceUseCase> {
  private final Provider<SpacesRepository> repositoryProvider;

  public SpaceModule_ProvideGetTxnBalanceUseCaseFactory(
      Provider<SpacesRepository> repositoryProvider) {
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public GetTxnBalanceUseCase get() {
    return provideGetTxnBalanceUseCase(repositoryProvider.get());
  }

  public static SpaceModule_ProvideGetTxnBalanceUseCaseFactory create(
      Provider<SpacesRepository> repositoryProvider) {
    return new SpaceModule_ProvideGetTxnBalanceUseCaseFactory(repositoryProvider);
  }

  public static GetTxnBalanceUseCase provideGetTxnBalanceUseCase(SpacesRepository repository) {
    return Preconditions.checkNotNullFromProvides(SpaceModule.INSTANCE.provideGetTxnBalanceUseCase(repository));
  }
}
