// Generated by Dagger (https://dagger.dev).
package com.example.splityourbillsandroid;

import android.app.Activity;
import android.app.Service;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.example.authentication.data.remote.AuthenticationService;
import com.example.authentication.di.AuthenticationModule;
import com.example.authentication.di.AuthenticationModule_ProvideAuthenticationRepositoryFactory;
import com.example.authentication.di.AuthenticationModule_ProvideAuthenticationServiceFactory;
import com.example.authentication.di.AuthenticationModule_ProvideLoginUseCaseFactory;
import com.example.authentication.di.AuthenticationModule_ProvideRegistrationUseCaseFactory;
import com.example.authentication.domain.repository.AuthenticationRepository;
import com.example.authentication.domain.usecase.LoginUseCase;
import com.example.authentication.domain.usecase.RegistrationUseCase;
import com.example.authentication.presentation.viewModel.AuthenticationViewModel;
import com.example.authentication.presentation.viewModel.AuthenticationViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.contact_picker.viewModel.ContactsViewModel;
import com.example.contact_picker.viewModel.ContactsViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.feature_profile.data.remote.UserProfileService;
import com.example.feature_profile.di.UserProfileModule;
import com.example.feature_profile.di.UserProfileModule_ProvideGetProfileInfoUseCaseFactory;
import com.example.feature_profile.di.UserProfileModule_ProvideProfileRepositoryFactory;
import com.example.feature_profile.di.UserProfileModule_ProvideProfileServiceFactory;
import com.example.feature_profile.di.UserProfileModule_ProvideUploadProfilePicUseCaseFactory;
import com.example.feature_profile.domain.repository.ProfileRepository;
import com.example.feature_profile.domain.usecase.GetProfileInfoUseCase;
import com.example.feature_profile.domain.usecase.UploadProfilePicUseCase;
import com.example.feature_profile.presentation.viewmodel.UserProfileViewModel;
import com.example.feature_profile.presentation.viewmodel.UserProfileViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.feature_space.data.remote.SpaceService;
import com.example.feature_space.di.SpaceModule;
import com.example.feature_space.di.SpaceModule_ProvideAddMembersToSpaceUsecaseFactory;
import com.example.feature_space.di.SpaceModule_ProvideCreateSpaceUsecaseFactory;
import com.example.feature_space.di.SpaceModule_ProvideEditSpaceUsecaseFactory;
import com.example.feature_space.di.SpaceModule_ProvideGetAllMembersForSpaceIdUseCaseFactory;
import com.example.feature_space.di.SpaceModule_ProvideGetAllSpacesByUserIdUsecaseFactory;
import com.example.feature_space.di.SpaceModule_ProvideGetSpecificSpaceDetailsBySpaceIdFactory;
import com.example.feature_space.di.SpaceModule_ProvideGetTxnBalanceUseCaseFactory;
import com.example.feature_space.di.SpaceModule_ProvideGetTxnDetailsBySpaceIdUseCaseFactory;
import com.example.feature_space.di.SpaceModule_ProvideSpaceRepositoryFactory;
import com.example.feature_space.di.SpaceModule_ProvideSpaceServiceFactory;
import com.example.feature_space.domain.repository.SpacesRepository;
import com.example.feature_space.domain.usecase.AddMembersToSpaceUseCase;
import com.example.feature_space.domain.usecase.CreateSpaceUseCase;
import com.example.feature_space.domain.usecase.EditSpaceUseCase;
import com.example.feature_space.domain.usecase.GetAllMembersForSpaceIdUseCase;
import com.example.feature_space.domain.usecase.GetAllSpaceByUserIdUsecase;
import com.example.feature_space.domain.usecase.GetSpecificSpaceDetailsBySpaceIdUseCase;
import com.example.feature_space.domain.usecase.GetTxnBalanceUseCase;
import com.example.feature_space.domain.usecase.GetTxnDetailsBySpaceIdUseCase;
import com.example.feature_space.presentation.viewmodel.SpaceViewModel;
import com.example.feature_space.presentation.viewmodel.SpaceViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.feature_transaction.data.remote.TransactionService;
import com.example.feature_transaction.di.TransactionModule;
import com.example.feature_transaction.di.TransactionModule_ProvideAddTxnListUseCaseFactory;
import com.example.feature_transaction.di.TransactionModule_ProvideCreateTransactionUsecaseFactory;
import com.example.feature_transaction.di.TransactionModule_ProvideDeleteTransactionDetailsByTxnDetailsIdUseCaseFactory;
import com.example.feature_transaction.di.TransactionModule_ProvideDeleteTransactionUsecaseFactory;
import com.example.feature_transaction.di.TransactionModule_ProvideGetAllSpaceMembersBySpaceIdUsecaseFactory;
import com.example.feature_transaction.di.TransactionModule_ProvideGetAllSpacesByUserIdUsecaseFactory;
import com.example.feature_transaction.di.TransactionModule_ProvideGetAllTxnDetailsByTxnIdUseCaseFactory;
import com.example.feature_transaction.di.TransactionModule_ProvideGetAllTxnDetailsByUserIdUseCaseFactory;
import com.example.feature_transaction.di.TransactionModule_ProvideGetSingleTxnDetailsByTxnDetailsIdUseCaseFactory;
import com.example.feature_transaction.di.TransactionModule_ProvideSpaceRepositoryFactory;
import com.example.feature_transaction.di.TransactionModule_ProvideSpaceServiceFactory;
import com.example.feature_transaction.di.TransactionModule_ProvideUpdateSingleTxnDetailsByTxnIdUseCaseFactory;
import com.example.feature_transaction.di.TransactionModule_ProvidegetTxnBalanceUseCaseFactory;
import com.example.feature_transaction.domain.repository.TransactionRepository;
import com.example.feature_transaction.domain.use_case.AddTxnListUseCase;
import com.example.feature_transaction.domain.use_case.CreateTransactionUseCase;
import com.example.feature_transaction.domain.use_case.DeleteTransactionDetailsByTxnDetailsIdUseCase;
import com.example.feature_transaction.domain.use_case.DeleteTransactionUseCase;
import com.example.feature_transaction.domain.use_case.GetAllSpaceMembersBySpaceIdUsecase;
import com.example.feature_transaction.domain.use_case.GetAllTxnDetailsByTxnIdUseCase;
import com.example.feature_transaction.domain.use_case.GetAllTxnDetailsByUserIdUseCase;
import com.example.feature_transaction.domain.use_case.GetSingleTxnDetailsByTxnDetailsIdUsecase;
import com.example.feature_transaction.domain.use_case.UpdateSingleTxnDetailsByTxnIdUseCase;
import com.example.feature_transaction.presentation.viewmodel.TransactionViewModel;
import com.example.feature_transaction.presentation.viewmodel.TransactionViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.media_picker.presentation.MediaPickerViewModel;
import com.example.media_picker.presentation.MediaPickerViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.network.AuthInterceptor;
import com.example.network.di.NetworkModule;
import com.example.network.di.NetworkModule_ProvideAuthInterceptorFactory;
import com.example.network.di.NetworkModule_ProvideLoggingInterceptorFactory;
import com.example.network.di.NetworkModule_ProvideNetworkFactory;
import com.example.network.di.NetworkModule_ProvideOkHttpClientFactory;
import com.example.session.SessionManager;
import com.example.splityourbillsandroid.di.AppModule;
import com.example.splityourbillsandroid.di.AppModule_ProvidesSessionManagerFactory;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import dagger.internal.SetBuilder;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerSplitYourBillsApplication_HiltComponents_SingletonC extends SplitYourBillsApplication_HiltComponents.SingletonC {
  private final ApplicationContextModule applicationContextModule;

  private final TransactionModule transactionModule;

  private final UserProfileModule userProfileModule;

  private final DaggerSplitYourBillsApplication_HiltComponents_SingletonC singletonC = this;

  private Provider<SessionManager> providesSessionManagerProvider;

  private Provider<HttpLoggingInterceptor> provideLoggingInterceptorProvider;

  private Provider<AuthInterceptor> provideAuthInterceptorProvider;

  private Provider<OkHttpClient> provideOkHttpClientProvider;

  private Provider<Retrofit> provideNetworkProvider;

  private Provider<AuthenticationService> provideAuthenticationServiceProvider;

  private Provider<AuthenticationRepository> provideAuthenticationRepositoryProvider;

  private Provider<RegistrationUseCase> provideRegistrationUseCaseProvider;

  private Provider<LoginUseCase> provideLoginUseCaseProvider;

  private Provider<SpaceService> provideSpaceServiceProvider;

  private Provider<SpacesRepository> provideSpaceRepositoryProvider;

  private Provider<CreateSpaceUseCase> provideCreateSpaceUsecaseProvider;

  private Provider<GetAllSpaceByUserIdUsecase> provideGetAllSpacesByUserIdUsecaseProvider;

  private Provider<GetSpecificSpaceDetailsBySpaceIdUseCase> provideGetSpecificSpaceDetailsBySpaceIdProvider;

  private Provider<EditSpaceUseCase> provideEditSpaceUsecaseProvider;

  private Provider<AddMembersToSpaceUseCase> provideAddMembersToSpaceUsecaseProvider;

  private Provider<GetAllMembersForSpaceIdUseCase> provideGetAllMembersForSpaceIdUseCaseProvider;

  private Provider<GetTxnDetailsBySpaceIdUseCase> provideGetTxnDetailsBySpaceIdUseCaseProvider;

  private Provider<GetTxnBalanceUseCase> provideGetTxnBalanceUseCaseProvider;

  private Provider<TransactionService> provideSpaceServiceProvider2;

  private Provider<TransactionRepository> provideSpaceRepositoryProvider2;

  private Provider<com.example.feature_transaction.domain.use_case.GetAllSpaceByUserIdUsecase> provideGetAllSpacesByUserIdUsecaseProvider2;

  private Provider<GetAllSpaceMembersBySpaceIdUsecase> provideGetAllSpaceMembersBySpaceIdUsecaseProvider;

  private Provider<CreateTransactionUseCase> provideCreateTransactionUsecaseProvider;

  private Provider<DeleteTransactionUseCase> provideDeleteTransactionUsecaseProvider;

  private Provider<AddTxnListUseCase> provideAddTxnListUseCaseProvider;

  private Provider<GetAllTxnDetailsByTxnIdUseCase> provideGetAllTxnDetailsByTxnIdUseCaseProvider;

  private Provider<GetSingleTxnDetailsByTxnDetailsIdUsecase> provideGetSingleTxnDetailsByTxnDetailsIdUseCaseProvider;

  private Provider<DeleteTransactionDetailsByTxnDetailsIdUseCase> provideDeleteTransactionDetailsByTxnDetailsIdUseCaseProvider;

  private Provider<UpdateSingleTxnDetailsByTxnIdUseCase> provideUpdateSingleTxnDetailsByTxnIdUseCaseProvider;

  private Provider<GetAllTxnDetailsByUserIdUseCase> provideGetAllTxnDetailsByUserIdUseCaseProvider;

  private Provider<com.example.feature_transaction.domain.use_case.GetTxnBalanceUseCase> providegetTxnBalanceUseCaseProvider;

  private Provider<UserProfileService> provideProfileServiceProvider;

  private Provider<ProfileRepository> provideProfileRepositoryProvider;

  private Provider<GetProfileInfoUseCase> provideGetProfileInfoUseCaseProvider;

  private Provider<UploadProfilePicUseCase> provideUploadProfilePicUseCaseProvider;

  private DaggerSplitYourBillsApplication_HiltComponents_SingletonC(
      ApplicationContextModule applicationContextModuleParam,
      TransactionModule transactionModuleParam, UserProfileModule userProfileModuleParam) {
    this.applicationContextModule = applicationContextModuleParam;
    this.transactionModule = transactionModuleParam;
    this.userProfileModule = userProfileModuleParam;
    initialize(applicationContextModuleParam, transactionModuleParam, userProfileModuleParam);

  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final ApplicationContextModule applicationContextModuleParam,
      final TransactionModule transactionModuleParam,
      final UserProfileModule userProfileModuleParam) {
    this.providesSessionManagerProvider = DoubleCheck.provider(new SwitchingProvider<SessionManager>(singletonC, 0));
    this.provideLoggingInterceptorProvider = DoubleCheck.provider(new SwitchingProvider<HttpLoggingInterceptor>(singletonC, 6));
    this.provideAuthInterceptorProvider = DoubleCheck.provider(new SwitchingProvider<AuthInterceptor>(singletonC, 7));
    this.provideOkHttpClientProvider = DoubleCheck.provider(new SwitchingProvider<OkHttpClient>(singletonC, 5));
    this.provideNetworkProvider = DoubleCheck.provider(new SwitchingProvider<Retrofit>(singletonC, 4));
    this.provideAuthenticationServiceProvider = DoubleCheck.provider(new SwitchingProvider<AuthenticationService>(singletonC, 3));
    this.provideAuthenticationRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<AuthenticationRepository>(singletonC, 2));
    this.provideRegistrationUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<RegistrationUseCase>(singletonC, 1));
    this.provideLoginUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<LoginUseCase>(singletonC, 8));
    this.provideSpaceServiceProvider = DoubleCheck.provider(new SwitchingProvider<SpaceService>(singletonC, 11));
    this.provideSpaceRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<SpacesRepository>(singletonC, 10));
    this.provideCreateSpaceUsecaseProvider = DoubleCheck.provider(new SwitchingProvider<CreateSpaceUseCase>(singletonC, 9));
    this.provideGetAllSpacesByUserIdUsecaseProvider = DoubleCheck.provider(new SwitchingProvider<GetAllSpaceByUserIdUsecase>(singletonC, 12));
    this.provideGetSpecificSpaceDetailsBySpaceIdProvider = DoubleCheck.provider(new SwitchingProvider<GetSpecificSpaceDetailsBySpaceIdUseCase>(singletonC, 13));
    this.provideEditSpaceUsecaseProvider = DoubleCheck.provider(new SwitchingProvider<EditSpaceUseCase>(singletonC, 14));
    this.provideAddMembersToSpaceUsecaseProvider = DoubleCheck.provider(new SwitchingProvider<AddMembersToSpaceUseCase>(singletonC, 15));
    this.provideGetAllMembersForSpaceIdUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<GetAllMembersForSpaceIdUseCase>(singletonC, 16));
    this.provideGetTxnDetailsBySpaceIdUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<GetTxnDetailsBySpaceIdUseCase>(singletonC, 17));
    this.provideGetTxnBalanceUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<GetTxnBalanceUseCase>(singletonC, 18));
    this.provideSpaceServiceProvider2 = DoubleCheck.provider(new SwitchingProvider<TransactionService>(singletonC, 21));
    this.provideSpaceRepositoryProvider2 = DoubleCheck.provider(new SwitchingProvider<TransactionRepository>(singletonC, 20));
    this.provideGetAllSpacesByUserIdUsecaseProvider2 = DoubleCheck.provider(new SwitchingProvider<com.example.feature_transaction.domain.use_case.GetAllSpaceByUserIdUsecase>(singletonC, 19));
    this.provideGetAllSpaceMembersBySpaceIdUsecaseProvider = DoubleCheck.provider(new SwitchingProvider<GetAllSpaceMembersBySpaceIdUsecase>(singletonC, 22));
    this.provideCreateTransactionUsecaseProvider = DoubleCheck.provider(new SwitchingProvider<CreateTransactionUseCase>(singletonC, 23));
    this.provideDeleteTransactionUsecaseProvider = DoubleCheck.provider(new SwitchingProvider<DeleteTransactionUseCase>(singletonC, 24));
    this.provideAddTxnListUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<AddTxnListUseCase>(singletonC, 25));
    this.provideGetAllTxnDetailsByTxnIdUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<GetAllTxnDetailsByTxnIdUseCase>(singletonC, 26));
    this.provideGetSingleTxnDetailsByTxnDetailsIdUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<GetSingleTxnDetailsByTxnDetailsIdUsecase>(singletonC, 27));
    this.provideDeleteTransactionDetailsByTxnDetailsIdUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<DeleteTransactionDetailsByTxnDetailsIdUseCase>(singletonC, 28));
    this.provideUpdateSingleTxnDetailsByTxnIdUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<UpdateSingleTxnDetailsByTxnIdUseCase>(singletonC, 29));
    this.provideGetAllTxnDetailsByUserIdUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<GetAllTxnDetailsByUserIdUseCase>(singletonC, 30));
    this.providegetTxnBalanceUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<com.example.feature_transaction.domain.use_case.GetTxnBalanceUseCase>(singletonC, 31));
    this.provideProfileServiceProvider = DoubleCheck.provider(new SwitchingProvider<UserProfileService>(singletonC, 34));
    this.provideProfileRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<ProfileRepository>(singletonC, 33));
    this.provideGetProfileInfoUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<GetProfileInfoUseCase>(singletonC, 32));
    this.provideUploadProfilePicUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<UploadProfilePicUseCase>(singletonC, 35));
  }

  @Override
  public void injectSplitYourBillsApplication(SplitYourBillsApplication arg0) {
  }

  @Override
  public ActivityRetainedComponentBuilder retainedComponentBuilder() {
    return new ActivityRetainedCBuilder(singletonC);
  }

  @Override
  public ServiceComponentBuilder serviceComponentBuilder() {
    return new ServiceCBuilder(singletonC);
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private TransactionModule transactionModule;

    private UserProfileModule userProfileModule;

    private Builder() {
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder appModule(AppModule appModule) {
      Preconditions.checkNotNull(appModule);
      return this;
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder authenticationModule(AuthenticationModule authenticationModule) {
      Preconditions.checkNotNull(authenticationModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder networkModule(NetworkModule networkModule) {
      Preconditions.checkNotNull(networkModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder spaceModule(SpaceModule spaceModule) {
      Preconditions.checkNotNull(spaceModule);
      return this;
    }

    public Builder transactionModule(TransactionModule transactionModule) {
      this.transactionModule = Preconditions.checkNotNull(transactionModule);
      return this;
    }

    public Builder userProfileModule(UserProfileModule userProfileModule) {
      this.userProfileModule = Preconditions.checkNotNull(userProfileModule);
      return this;
    }

    public SplitYourBillsApplication_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      if (transactionModule == null) {
        this.transactionModule = new TransactionModule();
      }
      if (userProfileModule == null) {
        this.userProfileModule = new UserProfileModule();
      }
      return new DaggerSplitYourBillsApplication_HiltComponents_SingletonC(applicationContextModule, transactionModule, userProfileModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements SplitYourBillsApplication_HiltComponents.ActivityRetainedC.Builder {
    private final DaggerSplitYourBillsApplication_HiltComponents_SingletonC singletonC;

    private ActivityRetainedCBuilder(
        DaggerSplitYourBillsApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public SplitYourBillsApplication_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(singletonC);
    }
  }

  private static final class ActivityCBuilder implements SplitYourBillsApplication_HiltComponents.ActivityC.Builder {
    private final DaggerSplitYourBillsApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private Activity activity;

    private ActivityCBuilder(DaggerSplitYourBillsApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ActivityCBuilder activity(Activity activity) {
      this.activity = Preconditions.checkNotNull(activity);
      return this;
    }

    @Override
    public SplitYourBillsApplication_HiltComponents.ActivityC build() {
      Preconditions.checkBuilderRequirement(activity, Activity.class);
      return new ActivityCImpl(singletonC, activityRetainedCImpl, activity);
    }
  }

  private static final class FragmentCBuilder implements SplitYourBillsApplication_HiltComponents.FragmentC.Builder {
    private final DaggerSplitYourBillsApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private Fragment fragment;

    private FragmentCBuilder(DaggerSplitYourBillsApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public FragmentCBuilder fragment(Fragment fragment) {
      this.fragment = Preconditions.checkNotNull(fragment);
      return this;
    }

    @Override
    public SplitYourBillsApplication_HiltComponents.FragmentC build() {
      Preconditions.checkBuilderRequirement(fragment, Fragment.class);
      return new FragmentCImpl(singletonC, activityRetainedCImpl, activityCImpl, fragment);
    }
  }

  private static final class ViewWithFragmentCBuilder implements SplitYourBillsApplication_HiltComponents.ViewWithFragmentC.Builder {
    private final DaggerSplitYourBillsApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private View view;

    private ViewWithFragmentCBuilder(
        DaggerSplitYourBillsApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;
    }

    @Override
    public ViewWithFragmentCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public SplitYourBillsApplication_HiltComponents.ViewWithFragmentC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewWithFragmentCImpl(singletonC, activityRetainedCImpl, activityCImpl, fragmentCImpl, view);
    }
  }

  private static final class ViewCBuilder implements SplitYourBillsApplication_HiltComponents.ViewC.Builder {
    private final DaggerSplitYourBillsApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private View view;

    private ViewCBuilder(DaggerSplitYourBillsApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public ViewCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public SplitYourBillsApplication_HiltComponents.ViewC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewCImpl(singletonC, activityRetainedCImpl, activityCImpl, view);
    }
  }

  private static final class ViewModelCBuilder implements SplitYourBillsApplication_HiltComponents.ViewModelC.Builder {
    private final DaggerSplitYourBillsApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private SavedStateHandle savedStateHandle;

    private ViewModelCBuilder(DaggerSplitYourBillsApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
      this.savedStateHandle = Preconditions.checkNotNull(handle);
      return this;
    }

    @Override
    public SplitYourBillsApplication_HiltComponents.ViewModelC build() {
      Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
      return new ViewModelCImpl(singletonC, activityRetainedCImpl, savedStateHandle);
    }
  }

  private static final class ServiceCBuilder implements SplitYourBillsApplication_HiltComponents.ServiceC.Builder {
    private final DaggerSplitYourBillsApplication_HiltComponents_SingletonC singletonC;

    private Service service;

    private ServiceCBuilder(DaggerSplitYourBillsApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public SplitYourBillsApplication_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonC, service);
    }
  }

  private static final class ViewWithFragmentCImpl extends SplitYourBillsApplication_HiltComponents.ViewWithFragmentC {
    private final DaggerSplitYourBillsApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private final ViewWithFragmentCImpl viewWithFragmentCImpl = this;

    private ViewWithFragmentCImpl(
        DaggerSplitYourBillsApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl, View viewParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;


    }
  }

  private static final class FragmentCImpl extends SplitYourBillsApplication_HiltComponents.FragmentC {
    private final DaggerSplitYourBillsApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl = this;

    private FragmentCImpl(DaggerSplitYourBillsApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        Fragment fragmentParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return activityCImpl.getHiltInternalFactoryFactory();
    }

    @Override
    public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
      return new ViewWithFragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl, fragmentCImpl);
    }
  }

  private static final class ViewCImpl extends SplitYourBillsApplication_HiltComponents.ViewC {
    private final DaggerSplitYourBillsApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final ViewCImpl viewCImpl = this;

    private ViewCImpl(DaggerSplitYourBillsApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl, View viewParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }
  }

  private static final class ActivityCImpl extends SplitYourBillsApplication_HiltComponents.ActivityC {
    private final DaggerSplitYourBillsApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl = this;

    private ActivityCImpl(DaggerSplitYourBillsApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;


    }

    @Override
    public void injectMainActivity(MainActivity arg0) {
      injectMainActivity2(arg0);
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), getViewModelKeys(), new ViewModelCBuilder(singletonC, activityRetainedCImpl));
    }

    @Override
    public Set<String> getViewModelKeys() {
      return SetBuilder.<String>newSetBuilder(6).add(AuthenticationViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(ContactsViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(MediaPickerViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(SpaceViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(TransactionViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(UserProfileViewModel_HiltModules_KeyModule_ProvideFactory.provide()).build();
    }

    @Override
    public ViewModelComponentBuilder getViewModelComponentBuilder() {
      return new ViewModelCBuilder(singletonC, activityRetainedCImpl);
    }

    @Override
    public FragmentComponentBuilder fragmentComponentBuilder() {
      return new FragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public ViewComponentBuilder viewComponentBuilder() {
      return new ViewCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
    }

    private MainActivity injectMainActivity2(MainActivity instance) {
      MainActivity_MembersInjector.injectSessionManager(instance, singletonC.providesSessionManagerProvider.get());
      return instance;
    }
  }

  private static final class ViewModelCImpl extends SplitYourBillsApplication_HiltComponents.ViewModelC {
    private final DaggerSplitYourBillsApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ViewModelCImpl viewModelCImpl = this;

    private Provider<AuthenticationViewModel> authenticationViewModelProvider;

    private Provider<ContactsViewModel> contactsViewModelProvider;

    private Provider<MediaPickerViewModel> mediaPickerViewModelProvider;

    private Provider<SpaceViewModel> spaceViewModelProvider;

    private Provider<TransactionViewModel> transactionViewModelProvider;

    private Provider<UserProfileViewModel> userProfileViewModelProvider;

    private ViewModelCImpl(DaggerSplitYourBillsApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;

      initialize(savedStateHandleParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavedStateHandle savedStateHandleParam) {
      this.authenticationViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 0);
      this.contactsViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 1);
      this.mediaPickerViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 2);
      this.spaceViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 3);
      this.transactionViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 4);
      this.userProfileViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 5);
    }

    @Override
    public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
      return MapBuilder.<String, Provider<ViewModel>>newMapBuilder(6).put("com.example.authentication.presentation.viewModel.AuthenticationViewModel", ((Provider) authenticationViewModelProvider)).put("com.example.contact_picker.viewModel.ContactsViewModel", ((Provider) contactsViewModelProvider)).put("com.example.media_picker.presentation.MediaPickerViewModel", ((Provider) mediaPickerViewModelProvider)).put("com.example.feature_space.presentation.viewmodel.SpaceViewModel", ((Provider) spaceViewModelProvider)).put("com.example.feature_transaction.presentation.viewmodel.TransactionViewModel", ((Provider) transactionViewModelProvider)).put("com.example.feature_profile.presentation.viewmodel.UserProfileViewModel", ((Provider) userProfileViewModelProvider)).build();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final DaggerSplitYourBillsApplication_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl;

      private final int id;

      SwitchingProvider(DaggerSplitYourBillsApplication_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, ViewModelCImpl viewModelCImpl, int id) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.viewModelCImpl = viewModelCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.example.authentication.presentation.viewModel.AuthenticationViewModel 
          return (T) new AuthenticationViewModel(singletonC.provideRegistrationUseCaseProvider.get(), singletonC.provideLoginUseCaseProvider.get(), singletonC.providesSessionManagerProvider.get());

          case 1: // com.example.contact_picker.viewModel.ContactsViewModel 
          return (T) new ContactsViewModel();

          case 2: // com.example.media_picker.presentation.MediaPickerViewModel 
          return (T) new MediaPickerViewModel();

          case 3: // com.example.feature_space.presentation.viewmodel.SpaceViewModel 
          return (T) new SpaceViewModel(singletonC.provideCreateSpaceUsecaseProvider.get(), singletonC.provideGetAllSpacesByUserIdUsecaseProvider.get(), singletonC.provideGetSpecificSpaceDetailsBySpaceIdProvider.get(), singletonC.provideEditSpaceUsecaseProvider.get(), singletonC.provideAddMembersToSpaceUsecaseProvider.get(), singletonC.provideGetAllMembersForSpaceIdUseCaseProvider.get(), singletonC.provideGetTxnDetailsBySpaceIdUseCaseProvider.get(), singletonC.provideGetTxnBalanceUseCaseProvider.get(), singletonC.providesSessionManagerProvider.get());

          case 4: // com.example.feature_transaction.presentation.viewmodel.TransactionViewModel 
          return (T) new TransactionViewModel(singletonC.provideGetAllSpacesByUserIdUsecaseProvider2.get(), singletonC.provideGetAllSpaceMembersBySpaceIdUsecaseProvider.get(), singletonC.provideCreateTransactionUsecaseProvider.get(), singletonC.provideDeleteTransactionUsecaseProvider.get(), singletonC.provideAddTxnListUseCaseProvider.get(), singletonC.provideGetAllTxnDetailsByTxnIdUseCaseProvider.get(), singletonC.provideGetSingleTxnDetailsByTxnDetailsIdUseCaseProvider.get(), singletonC.provideDeleteTransactionDetailsByTxnDetailsIdUseCaseProvider.get(), singletonC.provideUpdateSingleTxnDetailsByTxnIdUseCaseProvider.get(), singletonC.provideGetAllTxnDetailsByUserIdUseCaseProvider.get(), singletonC.providegetTxnBalanceUseCaseProvider.get(), singletonC.providesSessionManagerProvider.get());

          case 5: // com.example.feature_profile.presentation.viewmodel.UserProfileViewModel 
          return (T) new UserProfileViewModel(singletonC.provideGetProfileInfoUseCaseProvider.get(), singletonC.provideUploadProfilePicUseCaseProvider.get());

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ActivityRetainedCImpl extends SplitYourBillsApplication_HiltComponents.ActivityRetainedC {
    private final DaggerSplitYourBillsApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    @SuppressWarnings("rawtypes")
    private Provider lifecycleProvider;

    private ActivityRetainedCImpl(
        DaggerSplitYourBillsApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;

      initialize();

    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.lifecycleProvider = DoubleCheck.provider(new SwitchingProvider<Object>(singletonC, activityRetainedCImpl, 0));
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonC, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycleProvider.get();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final DaggerSplitYourBillsApplication_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final int id;

      SwitchingProvider(DaggerSplitYourBillsApplication_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, int id) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // dagger.hilt.android.internal.managers.ActivityRetainedComponentManager.Lifecycle 
          return (T) ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ServiceCImpl extends SplitYourBillsApplication_HiltComponents.ServiceC {
    private final DaggerSplitYourBillsApplication_HiltComponents_SingletonC singletonC;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(DaggerSplitYourBillsApplication_HiltComponents_SingletonC singletonC,
        Service serviceParam) {
      this.singletonC = singletonC;


    }
  }

  private static final class SwitchingProvider<T> implements Provider<T> {
    private final DaggerSplitYourBillsApplication_HiltComponents_SingletonC singletonC;

    private final int id;

    SwitchingProvider(DaggerSplitYourBillsApplication_HiltComponents_SingletonC singletonC,
        int id) {
      this.singletonC = singletonC;
      this.id = id;
    }

    @SuppressWarnings("unchecked")
    @Override
    public T get() {
      switch (id) {
        case 0: // com.example.session.SessionManager 
        return (T) AppModule_ProvidesSessionManagerFactory.providesSessionManager(ApplicationContextModule_ProvideContextFactory.provideContext(singletonC.applicationContextModule));

        case 1: // com.example.authentication.domain.usecase.RegistrationUseCase 
        return (T) AuthenticationModule_ProvideRegistrationUseCaseFactory.provideRegistrationUseCase(singletonC.provideAuthenticationRepositoryProvider.get());

        case 2: // com.example.authentication.domain.repository.AuthenticationRepository 
        return (T) AuthenticationModule_ProvideAuthenticationRepositoryFactory.provideAuthenticationRepository(singletonC.provideAuthenticationServiceProvider.get());

        case 3: // com.example.authentication.data.remote.AuthenticationService 
        return (T) AuthenticationModule_ProvideAuthenticationServiceFactory.provideAuthenticationService(singletonC.provideNetworkProvider.get());

        case 4: // retrofit2.Retrofit 
        return (T) NetworkModule_ProvideNetworkFactory.provideNetwork(singletonC.provideOkHttpClientProvider.get());

        case 5: // okhttp3.OkHttpClient 
        return (T) NetworkModule_ProvideOkHttpClientFactory.provideOkHttpClient(singletonC.provideLoggingInterceptorProvider.get(), singletonC.provideAuthInterceptorProvider.get());

        case 6: // okhttp3.logging.HttpLoggingInterceptor 
        return (T) NetworkModule_ProvideLoggingInterceptorFactory.provideLoggingInterceptor();

        case 7: // com.example.network.AuthInterceptor 
        return (T) NetworkModule_ProvideAuthInterceptorFactory.provideAuthInterceptor(singletonC.providesSessionManagerProvider.get());

        case 8: // com.example.authentication.domain.usecase.LoginUseCase 
        return (T) AuthenticationModule_ProvideLoginUseCaseFactory.provideLoginUseCase(singletonC.provideAuthenticationRepositoryProvider.get());

        case 9: // com.example.feature_space.domain.usecase.CreateSpaceUseCase 
        return (T) SpaceModule_ProvideCreateSpaceUsecaseFactory.provideCreateSpaceUsecase(singletonC.provideSpaceRepositoryProvider.get());

        case 10: // com.example.feature_space.domain.repository.SpacesRepository 
        return (T) SpaceModule_ProvideSpaceRepositoryFactory.provideSpaceRepository(singletonC.provideSpaceServiceProvider.get());

        case 11: // com.example.feature_space.data.remote.SpaceService 
        return (T) SpaceModule_ProvideSpaceServiceFactory.provideSpaceService(singletonC.provideNetworkProvider.get());

        case 12: // com.example.feature_space.domain.usecase.GetAllSpaceByUserIdUsecase 
        return (T) SpaceModule_ProvideGetAllSpacesByUserIdUsecaseFactory.provideGetAllSpacesByUserIdUsecase(singletonC.provideSpaceRepositoryProvider.get());

        case 13: // com.example.feature_space.domain.usecase.GetSpecificSpaceDetailsBySpaceIdUseCase 
        return (T) SpaceModule_ProvideGetSpecificSpaceDetailsBySpaceIdFactory.provideGetSpecificSpaceDetailsBySpaceId(singletonC.provideSpaceRepositoryProvider.get());

        case 14: // com.example.feature_space.domain.usecase.EditSpaceUseCase 
        return (T) SpaceModule_ProvideEditSpaceUsecaseFactory.provideEditSpaceUsecase(singletonC.provideSpaceRepositoryProvider.get());

        case 15: // com.example.feature_space.domain.usecase.AddMembersToSpaceUseCase 
        return (T) SpaceModule_ProvideAddMembersToSpaceUsecaseFactory.provideAddMembersToSpaceUsecase(singletonC.provideSpaceRepositoryProvider.get());

        case 16: // com.example.feature_space.domain.usecase.GetAllMembersForSpaceIdUseCase 
        return (T) SpaceModule_ProvideGetAllMembersForSpaceIdUseCaseFactory.provideGetAllMembersForSpaceIdUseCase(singletonC.provideSpaceRepositoryProvider.get());

        case 17: // com.example.feature_space.domain.usecase.GetTxnDetailsBySpaceIdUseCase 
        return (T) SpaceModule_ProvideGetTxnDetailsBySpaceIdUseCaseFactory.provideGetTxnDetailsBySpaceIdUseCase(singletonC.provideSpaceRepositoryProvider.get());

        case 18: // com.example.feature_space.domain.usecase.GetTxnBalanceUseCase 
        return (T) SpaceModule_ProvideGetTxnBalanceUseCaseFactory.provideGetTxnBalanceUseCase(singletonC.provideSpaceRepositoryProvider.get());

        case 19: // com.example.feature_transaction.domain.use_case.GetAllSpaceByUserIdUsecase 
        return (T) TransactionModule_ProvideGetAllSpacesByUserIdUsecaseFactory.provideGetAllSpacesByUserIdUsecase(singletonC.transactionModule, singletonC.provideSpaceRepositoryProvider2.get());

        case 20: // com.example.feature_transaction.domain.repository.TransactionRepository 
        return (T) TransactionModule_ProvideSpaceRepositoryFactory.provideSpaceRepository(singletonC.transactionModule, singletonC.provideSpaceServiceProvider2.get());

        case 21: // com.example.feature_transaction.data.remote.TransactionService 
        return (T) TransactionModule_ProvideSpaceServiceFactory.provideSpaceService(singletonC.transactionModule, singletonC.provideNetworkProvider.get());

        case 22: // com.example.feature_transaction.domain.use_case.GetAllSpaceMembersBySpaceIdUsecase 
        return (T) TransactionModule_ProvideGetAllSpaceMembersBySpaceIdUsecaseFactory.provideGetAllSpaceMembersBySpaceIdUsecase(singletonC.transactionModule, singletonC.provideSpaceRepositoryProvider2.get());

        case 23: // com.example.feature_transaction.domain.use_case.CreateTransactionUseCase 
        return (T) TransactionModule_ProvideCreateTransactionUsecaseFactory.provideCreateTransactionUsecase(singletonC.transactionModule, singletonC.provideSpaceRepositoryProvider2.get());

        case 24: // com.example.feature_transaction.domain.use_case.DeleteTransactionUseCase 
        return (T) TransactionModule_ProvideDeleteTransactionUsecaseFactory.provideDeleteTransactionUsecase(singletonC.transactionModule, singletonC.provideSpaceRepositoryProvider2.get());

        case 25: // com.example.feature_transaction.domain.use_case.AddTxnListUseCase 
        return (T) TransactionModule_ProvideAddTxnListUseCaseFactory.provideAddTxnListUseCase(singletonC.transactionModule, singletonC.provideSpaceRepositoryProvider2.get());

        case 26: // com.example.feature_transaction.domain.use_case.GetAllTxnDetailsByTxnIdUseCase 
        return (T) TransactionModule_ProvideGetAllTxnDetailsByTxnIdUseCaseFactory.provideGetAllTxnDetailsByTxnIdUseCase(singletonC.transactionModule, singletonC.provideSpaceRepositoryProvider2.get());

        case 27: // com.example.feature_transaction.domain.use_case.GetSingleTxnDetailsByTxnDetailsIdUsecase 
        return (T) TransactionModule_ProvideGetSingleTxnDetailsByTxnDetailsIdUseCaseFactory.provideGetSingleTxnDetailsByTxnDetailsIdUseCase(singletonC.transactionModule, singletonC.provideSpaceRepositoryProvider2.get());

        case 28: // com.example.feature_transaction.domain.use_case.DeleteTransactionDetailsByTxnDetailsIdUseCase 
        return (T) TransactionModule_ProvideDeleteTransactionDetailsByTxnDetailsIdUseCaseFactory.provideDeleteTransactionDetailsByTxnDetailsIdUseCase(singletonC.transactionModule, singletonC.provideSpaceRepositoryProvider2.get());

        case 29: // com.example.feature_transaction.domain.use_case.UpdateSingleTxnDetailsByTxnIdUseCase 
        return (T) TransactionModule_ProvideUpdateSingleTxnDetailsByTxnIdUseCaseFactory.provideUpdateSingleTxnDetailsByTxnIdUseCase(singletonC.transactionModule, singletonC.provideSpaceRepositoryProvider2.get());

        case 30: // com.example.feature_transaction.domain.use_case.GetAllTxnDetailsByUserIdUseCase 
        return (T) TransactionModule_ProvideGetAllTxnDetailsByUserIdUseCaseFactory.provideGetAllTxnDetailsByUserIdUseCase(singletonC.transactionModule, singletonC.provideSpaceRepositoryProvider2.get());

        case 31: // com.example.feature_transaction.domain.use_case.GetTxnBalanceUseCase 
        return (T) TransactionModule_ProvidegetTxnBalanceUseCaseFactory.providegetTxnBalanceUseCase(singletonC.transactionModule, singletonC.provideSpaceRepositoryProvider2.get());

        case 32: // com.example.feature_profile.domain.usecase.GetProfileInfoUseCase 
        return (T) UserProfileModule_ProvideGetProfileInfoUseCaseFactory.provideGetProfileInfoUseCase(singletonC.userProfileModule, singletonC.provideProfileRepositoryProvider.get());

        case 33: // com.example.feature_profile.domain.repository.ProfileRepository 
        return (T) UserProfileModule_ProvideProfileRepositoryFactory.provideProfileRepository(singletonC.userProfileModule, singletonC.provideProfileServiceProvider.get());

        case 34: // com.example.feature_profile.data.remote.UserProfileService 
        return (T) UserProfileModule_ProvideProfileServiceFactory.provideProfileService(singletonC.userProfileModule, singletonC.provideNetworkProvider.get());

        case 35: // com.example.feature_profile.domain.usecase.UploadProfilePicUseCase 
        return (T) UserProfileModule_ProvideUploadProfilePicUseCaseFactory.provideUploadProfilePicUseCase(singletonC.userProfileModule, singletonC.provideProfileRepositoryProvider.get());

        default: throw new AssertionError(id);
      }
    }
  }
}
