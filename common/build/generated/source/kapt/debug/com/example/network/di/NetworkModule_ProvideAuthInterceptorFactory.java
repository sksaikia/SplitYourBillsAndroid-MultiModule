// Generated by Dagger (https://dagger.dev).
package com.example.network.di;

import com.example.network.AuthInterceptor;
import com.example.session.SessionManager;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvideAuthInterceptorFactory implements Factory<AuthInterceptor> {
  private final Provider<SessionManager> sessionManagerProvider;

  public NetworkModule_ProvideAuthInterceptorFactory(
      Provider<SessionManager> sessionManagerProvider) {
    this.sessionManagerProvider = sessionManagerProvider;
  }

  @Override
  public AuthInterceptor get() {
    return provideAuthInterceptor(sessionManagerProvider.get());
  }

  public static NetworkModule_ProvideAuthInterceptorFactory create(
      Provider<SessionManager> sessionManagerProvider) {
    return new NetworkModule_ProvideAuthInterceptorFactory(sessionManagerProvider);
  }

  public static AuthInterceptor provideAuthInterceptor(SessionManager sessionManager) {
    return Preconditions.checkNotNullFromProvides(NetworkModule.INSTANCE.provideAuthInterceptor(sessionManager));
  }
}
