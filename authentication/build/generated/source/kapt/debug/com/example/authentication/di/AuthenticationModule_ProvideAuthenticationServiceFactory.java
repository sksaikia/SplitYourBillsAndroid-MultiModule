// Generated by Dagger (https://dagger.dev).
package com.example.authentication.di;

import com.example.authentication.data.remote.AuthenticationService;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AuthenticationModule_ProvideAuthenticationServiceFactory implements Factory<AuthenticationService> {
  private final Provider<Retrofit> retrofitProvider;

  public AuthenticationModule_ProvideAuthenticationServiceFactory(
      Provider<Retrofit> retrofitProvider) {
    this.retrofitProvider = retrofitProvider;
  }

  @Override
  public AuthenticationService get() {
    return provideAuthenticationService(retrofitProvider.get());
  }

  public static AuthenticationModule_ProvideAuthenticationServiceFactory create(
      Provider<Retrofit> retrofitProvider) {
    return new AuthenticationModule_ProvideAuthenticationServiceFactory(retrofitProvider);
  }

  public static AuthenticationService provideAuthenticationService(Retrofit retrofit) {
    return Preconditions.checkNotNullFromProvides(AuthenticationModule.INSTANCE.provideAuthenticationService(retrofit));
  }
}
