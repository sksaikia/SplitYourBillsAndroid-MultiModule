// Generated by Dagger (https://dagger.dev).
package com.example.authentication.presentation.viewModel;

import com.example.authentication.domain.usecase.LoginUseCase;
import com.example.authentication.domain.usecase.RegistrationUseCase;
import com.example.session.SessionManager;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AuthenticationViewModel_Factory implements Factory<AuthenticationViewModel> {
  private final Provider<RegistrationUseCase> registrationUseCaseProvider;

  private final Provider<LoginUseCase> loginUseCaseProvider;

  private final Provider<SessionManager> sessionManagerProvider;

  public AuthenticationViewModel_Factory(Provider<RegistrationUseCase> registrationUseCaseProvider,
      Provider<LoginUseCase> loginUseCaseProvider,
      Provider<SessionManager> sessionManagerProvider) {
    this.registrationUseCaseProvider = registrationUseCaseProvider;
    this.loginUseCaseProvider = loginUseCaseProvider;
    this.sessionManagerProvider = sessionManagerProvider;
  }

  @Override
  public AuthenticationViewModel get() {
    return newInstance(registrationUseCaseProvider.get(), loginUseCaseProvider.get(), sessionManagerProvider.get());
  }

  public static AuthenticationViewModel_Factory create(
      Provider<RegistrationUseCase> registrationUseCaseProvider,
      Provider<LoginUseCase> loginUseCaseProvider,
      Provider<SessionManager> sessionManagerProvider) {
    return new AuthenticationViewModel_Factory(registrationUseCaseProvider, loginUseCaseProvider, sessionManagerProvider);
  }

  public static AuthenticationViewModel newInstance(RegistrationUseCase registrationUseCase,
      LoginUseCase loginUseCase, SessionManager sessionManager) {
    return new AuthenticationViewModel(registrationUseCase, loginUseCase, sessionManager);
  }
}
