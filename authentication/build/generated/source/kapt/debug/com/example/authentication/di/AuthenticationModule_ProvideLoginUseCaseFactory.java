// Generated by Dagger (https://dagger.dev).
package com.example.authentication.di;

import com.example.authentication.domain.repository.AuthenticationRepository;
import com.example.authentication.domain.usecase.LoginUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AuthenticationModule_ProvideLoginUseCaseFactory implements Factory<LoginUseCase> {
  private final Provider<AuthenticationRepository> repositoryProvider;

  public AuthenticationModule_ProvideLoginUseCaseFactory(
      Provider<AuthenticationRepository> repositoryProvider) {
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public LoginUseCase get() {
    return provideLoginUseCase(repositoryProvider.get());
  }

  public static AuthenticationModule_ProvideLoginUseCaseFactory create(
      Provider<AuthenticationRepository> repositoryProvider) {
    return new AuthenticationModule_ProvideLoginUseCaseFactory(repositoryProvider);
  }

  public static LoginUseCase provideLoginUseCase(AuthenticationRepository repository) {
    return Preconditions.checkNotNullFromProvides(AuthenticationModule.INSTANCE.provideLoginUseCase(repository));
  }
}
