// Generated by Dagger (https://dagger.dev).
package com.example.authentication.di;

import com.example.authentication.domain.repository.AuthenticationRepository;
import com.example.authentication.domain.usecase.RegistrationUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AuthenticationModule_ProvideRegistrationUseCaseFactory implements Factory<RegistrationUseCase> {
  private final Provider<AuthenticationRepository> repositoryProvider;

  public AuthenticationModule_ProvideRegistrationUseCaseFactory(
      Provider<AuthenticationRepository> repositoryProvider) {
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public RegistrationUseCase get() {
    return provideRegistrationUseCase(repositoryProvider.get());
  }

  public static AuthenticationModule_ProvideRegistrationUseCaseFactory create(
      Provider<AuthenticationRepository> repositoryProvider) {
    return new AuthenticationModule_ProvideRegistrationUseCaseFactory(repositoryProvider);
  }

  public static RegistrationUseCase provideRegistrationUseCase(
      AuthenticationRepository repository) {
    return Preconditions.checkNotNullFromProvides(AuthenticationModule.INSTANCE.provideRegistrationUseCase(repository));
  }
}
