// Generated by Dagger (https://dagger.dev).
package com.example.feature_profile.di;

import com.example.feature_profile.data.remote.UserProfileService;
import com.example.feature_profile.domain.repository.ProfileRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class UserProfileModule_ProvideProfileRepositoryFactory implements Factory<ProfileRepository> {
  private final UserProfileModule module;

  private final Provider<UserProfileService> apiProvider;

  public UserProfileModule_ProvideProfileRepositoryFactory(UserProfileModule module,
      Provider<UserProfileService> apiProvider) {
    this.module = module;
    this.apiProvider = apiProvider;
  }

  @Override
  public ProfileRepository get() {
    return provideProfileRepository(module, apiProvider.get());
  }

  public static UserProfileModule_ProvideProfileRepositoryFactory create(UserProfileModule module,
      Provider<UserProfileService> apiProvider) {
    return new UserProfileModule_ProvideProfileRepositoryFactory(module, apiProvider);
  }

  public static ProfileRepository provideProfileRepository(UserProfileModule instance,
      UserProfileService api) {
    return Preconditions.checkNotNullFromProvides(instance.provideProfileRepository(api));
  }
}
