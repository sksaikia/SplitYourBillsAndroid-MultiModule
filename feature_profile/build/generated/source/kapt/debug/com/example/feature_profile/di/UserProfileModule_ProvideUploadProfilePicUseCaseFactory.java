// Generated by Dagger (https://dagger.dev).
package com.example.feature_profile.di;

import com.example.feature_profile.domain.repository.ProfileRepository;
import com.example.feature_profile.domain.usecase.UploadProfilePicUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class UserProfileModule_ProvideUploadProfilePicUseCaseFactory implements Factory<UploadProfilePicUseCase> {
  private final UserProfileModule module;

  private final Provider<ProfileRepository> repositoryProvider;

  public UserProfileModule_ProvideUploadProfilePicUseCaseFactory(UserProfileModule module,
      Provider<ProfileRepository> repositoryProvider) {
    this.module = module;
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public UploadProfilePicUseCase get() {
    return provideUploadProfilePicUseCase(module, repositoryProvider.get());
  }

  public static UserProfileModule_ProvideUploadProfilePicUseCaseFactory create(
      UserProfileModule module, Provider<ProfileRepository> repositoryProvider) {
    return new UserProfileModule_ProvideUploadProfilePicUseCaseFactory(module, repositoryProvider);
  }

  public static UploadProfilePicUseCase provideUploadProfilePicUseCase(UserProfileModule instance,
      ProfileRepository repository) {
    return Preconditions.checkNotNullFromProvides(instance.provideUploadProfilePicUseCase(repository));
  }
}
